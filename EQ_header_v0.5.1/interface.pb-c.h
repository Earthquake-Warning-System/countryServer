/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: interface.proto */

#ifndef PROTOBUF_C_interface_2eproto__INCLUDED
#define PROTOBUF_C_interface_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _KpAlive KpAlive;
typedef struct _EQEvent EQEvent;
typedef struct _EQOccur EQOccur;
typedef struct _BootAsk BootAsk;
typedef struct _BootKp BootKp;
typedef struct _KpAliveAck KpAliveAck;
typedef struct _PacketType PacketType;


/* --- enums --- */


/* --- messages --- */

struct  _KpAlive
{
  ProtobufCMessage base;
  /*
   *keep alive packet : 0
   */
  char *packet_type;
  /*
   *sensor ID
   */
  char *sensor_id;
  uint32_t alive_flag;
  char *country_code;
  char *city_code;
  char *version;
};
#define KP_ALIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kp_alive__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _EQEvent
{
  ProtobufCMessage base;
  /*
   *earthquake event packet : 1
   */
  char *packet_type;
  /*
   *sensor ID
   */
  char *sensor_id;
  uint32_t event_output;
  int64_t event_sec;
  int64_t event_usec;
  char *version;
};
#define EQ_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eq_event__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string }


struct  _EQOccur
{
  ProtobufCMessage base;
  /*
   *earthquake occur packet : 2
   */
  char *packet_type;
  char *information;
  char *version;
};
#define EQ_OCCUR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eq_occur__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _BootAsk
{
  ProtobufCMessage base;
  /*
   *earthquake occur packet : 3
   */
  char *packet_type;
  /*
   *server IP
   */
  char *server_ip;
  int32_t server_port;
  char *version;
};
#define BOOT_ASK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&boot_ask__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _BootKp
{
  ProtobufCMessage base;
  /*
   *earthquake occur packet : 4
   */
  char *packet_type;
  char *server_id;
  char *token;
  char *version;
};
#define BOOT_KP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&boot_kp__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _KpAliveAck
{
  ProtobufCMessage base;
  /*
   *user keep alive with ack respond : 5
   */
  char *packet_type;
  /*
   * server : 1 ; user : 0
   */
  uint32_t role;
  char *server_id;
  char *version;
};
#define KP_ALIVE_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kp_alive_ack__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _PacketType
{
  ProtobufCMessage base;
  char *packet_type;
};
#define PACKET_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet_type__descriptor) \
    , (char *)protobuf_c_empty_string }


/* KpAlive methods */
void   kp_alive__init
                     (KpAlive         *message);
size_t kp_alive__get_packed_size
                     (const KpAlive   *message);
size_t kp_alive__pack
                     (const KpAlive   *message,
                      uint8_t             *out);
size_t kp_alive__pack_to_buffer
                     (const KpAlive   *message,
                      ProtobufCBuffer     *buffer);
KpAlive *
       kp_alive__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kp_alive__free_unpacked
                     (KpAlive *message,
                      ProtobufCAllocator *allocator);
/* EQEvent methods */
void   eq_event__init
                     (EQEvent         *message);
size_t eq_event__get_packed_size
                     (const EQEvent   *message);
size_t eq_event__pack
                     (const EQEvent   *message,
                      uint8_t             *out);
size_t eq_event__pack_to_buffer
                     (const EQEvent   *message,
                      ProtobufCBuffer     *buffer);
EQEvent *
       eq_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eq_event__free_unpacked
                     (EQEvent *message,
                      ProtobufCAllocator *allocator);
/* EQOccur methods */
void   eq_occur__init
                     (EQOccur         *message);
size_t eq_occur__get_packed_size
                     (const EQOccur   *message);
size_t eq_occur__pack
                     (const EQOccur   *message,
                      uint8_t             *out);
size_t eq_occur__pack_to_buffer
                     (const EQOccur   *message,
                      ProtobufCBuffer     *buffer);
EQOccur *
       eq_occur__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eq_occur__free_unpacked
                     (EQOccur *message,
                      ProtobufCAllocator *allocator);
/* BootAsk methods */
void   boot_ask__init
                     (BootAsk         *message);
size_t boot_ask__get_packed_size
                     (const BootAsk   *message);
size_t boot_ask__pack
                     (const BootAsk   *message,
                      uint8_t             *out);
size_t boot_ask__pack_to_buffer
                     (const BootAsk   *message,
                      ProtobufCBuffer     *buffer);
BootAsk *
       boot_ask__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   boot_ask__free_unpacked
                     (BootAsk *message,
                      ProtobufCAllocator *allocator);
/* BootKp methods */
void   boot_kp__init
                     (BootKp         *message);
size_t boot_kp__get_packed_size
                     (const BootKp   *message);
size_t boot_kp__pack
                     (const BootKp   *message,
                      uint8_t             *out);
size_t boot_kp__pack_to_buffer
                     (const BootKp   *message,
                      ProtobufCBuffer     *buffer);
BootKp *
       boot_kp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   boot_kp__free_unpacked
                     (BootKp *message,
                      ProtobufCAllocator *allocator);
/* KpAliveAck methods */
void   kp_alive_ack__init
                     (KpAliveAck         *message);
size_t kp_alive_ack__get_packed_size
                     (const KpAliveAck   *message);
size_t kp_alive_ack__pack
                     (const KpAliveAck   *message,
                      uint8_t             *out);
size_t kp_alive_ack__pack_to_buffer
                     (const KpAliveAck   *message,
                      ProtobufCBuffer     *buffer);
KpAliveAck *
       kp_alive_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kp_alive_ack__free_unpacked
                     (KpAliveAck *message,
                      ProtobufCAllocator *allocator);
/* PacketType methods */
void   packet_type__init
                     (PacketType         *message);
size_t packet_type__get_packed_size
                     (const PacketType   *message);
size_t packet_type__pack
                     (const PacketType   *message,
                      uint8_t             *out);
size_t packet_type__pack_to_buffer
                     (const PacketType   *message,
                      ProtobufCBuffer     *buffer);
PacketType *
       packet_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   packet_type__free_unpacked
                     (PacketType *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*KpAlive_Closure)
                 (const KpAlive *message,
                  void *closure_data);
typedef void (*EQEvent_Closure)
                 (const EQEvent *message,
                  void *closure_data);
typedef void (*EQOccur_Closure)
                 (const EQOccur *message,
                  void *closure_data);
typedef void (*BootAsk_Closure)
                 (const BootAsk *message,
                  void *closure_data);
typedef void (*BootKp_Closure)
                 (const BootKp *message,
                  void *closure_data);
typedef void (*KpAliveAck_Closure)
                 (const KpAliveAck *message,
                  void *closure_data);
typedef void (*PacketType_Closure)
                 (const PacketType *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kp_alive__descriptor;
extern const ProtobufCMessageDescriptor eq_event__descriptor;
extern const ProtobufCMessageDescriptor eq_occur__descriptor;
extern const ProtobufCMessageDescriptor boot_ask__descriptor;
extern const ProtobufCMessageDescriptor boot_kp__descriptor;
extern const ProtobufCMessageDescriptor kp_alive_ack__descriptor;
extern const ProtobufCMessageDescriptor packet_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_interface_2eproto__INCLUDED */
